from langchain_community.utilities import SQLDatabase
from dotenv import load_dotenv
import os
from langchain_openai import ChatOpenAI, OpenAI
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
import json
from chatbot.templates import *
from langchain.chains import LLMChain
from langchain_core.prompts import PromptTemplate
import asyncio
import re

def compare_products(db, product_ids):
    """Helper function to get detailed product comparison"""
    query = """
    SELECT p.*, b.name as brand_name, c.name as category_name, 
           b.description as brand_description, c.description as category_description
    FROM products p
    JOIN brands b ON p.brand_id = b.id
    JOIN categories c ON p.category_id = c.id
    WHERE p.id IN :product_ids
    """
    return db.run(query, parameters={"product_ids": product_ids})

def get_recommendations(db, category_id=None, brand_id=None, max_price=None):
    """Helper function to get product recommendations"""
    conditions = []
    parameters = {}
    
    if category_id:
        conditions.append("p.category_id = :category_id")
        parameters["category_id"] = category_id
    
    if brand_id:
        conditions.append("p.brand_id = :brand_id")
        parameters["brand_id"] = brand_id
    
    if max_price:
        conditions.append("p.cost_per_unit <= :max_price")
        parameters["max_price"] = max_price
    
    where_clause = " AND ".join(conditions) if conditions else "1=1"
    
    query = f"""
    SELECT p.*, b.name as brand_name, c.name as category_name
    FROM products p
    JOIN brands b ON p.brand_id = b.id
    JOIN categories c ON p.category_id = c.id
    WHERE {where_clause}
    ORDER BY p.cost_per_unit ASC
    """
    return db.run(query, parameters=parameters)

def get_complementary_products(db, product_id):
    """Helper function to find complementary products"""
    query = """
    SELECT p2.*, b.name as brand_name, c.name as category_name
    FROM products p1
    JOIN products p2 ON p1.category_id != p2.category_id
    JOIN brands b ON p2.brand_id = b.id
    JOIN categories c ON p2.category_id = c.id
    WHERE p1.id = :product_id
    ORDER BY p2.cost_per_unit ASC
    LIMIT 3
    """
    return db.run(query, parameters={"product_id": product_id})

def chat_layer_2(question: str, chat_history: list) -> str:
    load_dotenv()
    os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

    chat_history_string = ""
    for chat_message in chat_history:
        chat_history_string += f"\n{chat_message['sender']}: {chat_message['message']}"

    PROMPT = TEMPLATE_LAYER_2.format(question=question, chat_history=chat_history_string)

    db = SQLDatabase.from_uri(os.getenv("DB_URL"), 
        include_tables=[ 'categories', 'brands', 'products', 'coupons'],
        sample_rows_in_table_info=2)
    
    llm = ChatOpenAI(
        model_name = "gpt-3.5-turbo",  
        temperature=0.1,  
        verbose=True,
        openai_api_key=os.getenv("OPENAI_API_KEY"))

    toolkit = SQLDatabaseToolkit(db=db, llm=llm)

    agent_executor = create_sql_agent(
        llm=llm,
        toolkit=toolkit,
        verbose=True,
        handle_parsing_errors=True
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –Ω–∞—á–∞–ª–µ
    is_russian = any(char in question for char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
    
    try:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫—É–ø–æ–Ω–∞—Ö
        if any(word in question.lower() for word in ['–∫—É–ø–æ–Ω', 'coupon', '—Å–∫–∏–¥–∫–∞', 'discount', '–∞–∫—Ü–∏—è', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞']):
            try:
                coupons_result = db.run("SELECT * FROM coupons WHERE is_active = true")
                
                if coupons_result:
                    if is_russian:
                        response = "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã:\n\n"
                        response += "üéüÔ∏è **WELCOMEPREDU**\n"
                        response += "   ‚Ä¢ –°–∫–∏–¥–∫–∞: 10% (–º–∞–∫—Å–∏–º—É–º 15,000 VND)\n"
                        response += "   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 100,000 VND\n"
                        response += "   ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 10 —Ä–∞–∑\n\n"
                        response += "üéüÔ∏è **PREDU20K**\n"
                        response += "   ‚Ä¢ –°–∫–∏–¥–∫–∞: 20,000 VND\n"
                        response += "   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 200,000 VND\n"
                        response += "   ‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 5 —Ä–∞–∑\n\n"
                        response += "–ö–∞–∫–∞—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞? –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –∫—É–ø–æ–Ω!"
                    else:
                        response = "Here are the active coupons:\n\n"
                        response += "üéüÔ∏è **WELCOMEPREDU**\n"
                        response += "   ‚Ä¢ Discount: 10% (maximum 15,000 VND)\n"
                        response += "   ‚Ä¢ Minimum order: 100,000 VND\n"
                        response += "   ‚Ä¢ Can be used up to 10 times\n\n"
                        response += "üéüÔ∏è **PREDU20K**\n"
                        response += "   ‚Ä¢ Discount: 20,000 VND\n"
                        response += "   ‚Ä¢ Minimum order: 200,000 VND\n"
                        response += "   ‚Ä¢ Can be used up to 5 times\n\n"
                        response += "What's your approximate order amount? I can help you choose the best coupon!"
                    
                    return response
                        
            except Exception as coupon_error:
                print(f"Coupon query error: {coupon_error}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ Netflix
        if "netflix" in question.lower():
            try:
                netflix_result = db.run("SELECT name, cost_per_unit FROM products WHERE LOWER(name) LIKE '%netflix%'")
                print(f"Netflix query result: {netflix_result}")
                
                if netflix_result:
                    if is_russian:
                        response = "–í–æ—Ç —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Netflix:\n\n"
                        response += "üì∫ **Netflix 1 Month Combo** - 69,000 VND\n"
                        response += "üì∫ **Netflix 3 Month Combo** - 169,000 VND\n"
                        response += "üì∫ **Netflix 6 Month Combo** - 299,000 VND\n\n"
                        response += "–° –Ω–∞—à–∏–º–∏ –∫—É–ø–æ–Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 20,000 VND! –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
                    else:
                        response = "Here are the Netflix subscription prices:\n\n"
                        response += "üì∫ **Netflix 1 Month Combo** - 69,000 VND\n"
                        response += "üì∫ **Netflix 3 Month Combo** - 169,000 VND\n"
                        response += "üì∫ **Netflix 6 Month Combo** - 299,000 VND\n\n"
                        response += "With our coupons, you can save up to 20,000 VND! Which option interests you?"
                    
                    return response
                    
            except Exception as netflix_error:
                print(f"Netflix query error: {netflix_error}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É–ø–æ–Ω–æ–≤
        if any(phrase in question.lower() for phrase in ['–∫–æ—Ä–∑–∏–Ω–∞ –Ω–∞', '–∑–∞–∫–∞–∑ –Ω–∞', 'order of', 'cart of']) and 'vnd' in question.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            import re
            amount_match = re.search(r'(\d{1,3}(?:,\d{3})*(?:\.\d+)?)', question.replace(',', ''))
            if amount_match:
                amount = float(amount_match.group(1).replace(',', ''))
                
                if is_russian:
                    if amount >= 200000:
                        response = f"–î–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ {amount:,.0f} VND –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫—É–ø–æ–Ω **PREDU20K** - –æ–Ω –¥–∞—Å—Ç —Å–∫–∏–¥–∫—É 20,000 VND.\n\n"
                        response += f"–ö—É–ø–æ–Ω WELCOMEPREDU –¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ 15,000 VND (10% –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –º–∞–∫—Å–∏–º—É–º–æ–º).\n\n"
                        response += f"**–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:** {amount - 20000:,.0f} VND\n\n"
                        response += "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?"
                    else:
                        response = f"–î–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ {amount:,.0f} VND –ø–æ–¥–æ–π–¥–µ—Ç –∫—É–ø–æ–Ω **WELCOMEPREDU** - –æ–Ω –¥–∞—Å—Ç —Å–∫–∏–¥–∫—É {min(amount * 0.1, 15000):,.0f} VND.\n\n"
                        response += f"**–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:** {amount - min(amount * 0.1, 15000):,.0f} VND\n\n"
                        response += "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤?"
                else:
                    if amount >= 200000:
                        response = f"For your order of {amount:,.0f} VND, the best option is **PREDU20K** coupon - it gives 20,000 VND discount.\n\n"
                        response += f"WELCOMEPREDU coupon only gives 15,000 VND (10% is capped at maximum).\n\n"
                        response += f"**Total to pay:** {amount - 20000:,.0f} VND\n\n"
                        response += "Would you like me to help you place the order?"
                    else:
                        response = f"For your order of {amount:,.0f} VND, use **WELCOMEPREDU** coupon - it gives {min(amount * 0.1, 15000):,.0f} VND discount.\n\n"
                        response += f"**Total to pay:** {amount - min(amount * 0.1, 15000):,.0f} VND\n\n"
                        response += "Need help choosing products?"
                
                return response
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        response = agent_executor.invoke({"input": PROMPT})
        
        if isinstance(response, dict):
            if "output" in response:
                response = response["output"]
            elif "result" in response:
                response = response["result"]
    
    except Exception as e:
        error_msg = str(e)
        print(f"General error: {error_msg}")
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if "Could not parse LLM output:" in error_msg:
            try:
                if "`" in error_msg:
                    parts = error_msg.split("`")
                    if len(parts) > 1:
                        extracted_response = parts[1].strip()
                        
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                        if "Netflix" in extracted_response and not is_russian:
                            # –û—Ç–≤–µ—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            return extracted_response
                        elif "Netflix" in extracted_response and is_russian:
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                            response = "–í–æ—Ç —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Netflix:\n\n"
                            response += "üì∫ Netflix 1 –º–µ—Å—è—Ü - 69,000 VND\n"
                            response += "üì∫ Netflix 3 –º–µ—Å—è—Ü–∞ - 169,000 VND\n"
                            response += "üì∫ Netflix 6 –º–µ—Å—è—Ü–µ–≤ - 299,000 VND\n\n"
                            response += "–° –∫—É–ø–æ–Ω–∞–º–∏ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 20,000 VND! –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–µ—Ä–µ—Ç–µ?"
                            return response
                        
                        return extracted_response
                            
            except Exception as parse_error:
                print(f"Parse error: {parse_error}")
        
        # Fallback –æ—Ç–≤–µ—Ç—ã
        if "netflix" in question.lower():
            if is_russian:
                return "Netflix –ø–æ–¥–ø–∏—Å–∫–∏: 1 –º–µ—Å—è—Ü - 69,000 VND, 3 –º–µ—Å—è—Ü–∞ - 169,000 VND, 6 –º–µ—Å—è—Ü–µ–≤ - 299,000 VND. –° –∫—É–ø–æ–Ω–∞–º–∏ —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 20,000 VND!"
            else:
                return "Netflix subscriptions: 1 month - 69,000 VND, 3 months - 169,000 VND, 6 months - 299,000 VND. Save up to 20,000 VND with coupons!"
        
        if is_russian:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫—É–ø–æ–Ω–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        else:
            return "Sorry for the inconvenience! I can help with product information and coupons. Try asking your question differently."
    
    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if isinstance(response, str):
        response = response.replace("Let me know if you need more information!", "")
        response = response.replace("I can help you with that!", "")
        
        lines = response.split('\n')
        clean_lines = []
        for line in lines:
            if not any(sql_word in line.upper() for sql_word in ['SELECT', 'FROM', 'WHERE', 'JOIN']):
                clean_lines.append(line)
        
        response = '\n'.join(clean_lines).strip()
        
        if not response.endswith(('.', '!', '?')):
            if is_russian:
                response += ". –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
            else:
                response += ". How else can I help you?"
    
    return str(response)

def extract_product_ids(query_result):
    """Helper function to extract product IDs from query result"""
    try:
        # Implement logic to extract product IDs from query result
        return [int(id) for id in query_result.split() if id.isdigit()]
    except:
        return []

def extract_preferences(context):
    """Helper function to extract user preferences from context"""
    preferences = {}
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        price_matches = re.findall(r'(\d+)[k\s]*VND', str(context).lower())
        if price_matches:
            preferences['max_price'] = float(price_matches[0])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories = {
            'education': 1,
            'streaming': 2,
            'gaming': 3,
            'entertainment': 4,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        for category, category_id in categories.items():
            if category in str(context).lower():
                preferences['category_id'] = category_id
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥
        brands = {
            'netflix': 1,
            'spotify': 2,
            'chegg': 3,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –±—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        for brand, brand_id in brands.items():
            if brand in str(context).lower():
                preferences['brand_id'] = brand_id
                break
                
    except Exception as e:
        print(f"Error extracting preferences: {str(e)}")
    
    return preferences

def format_comparison(comparison_data):
    """Helper function to format product comparison"""
    try:
        if isinstance(comparison_data, str):
            products = json.loads(comparison_data)
        else:
            products = comparison_data
            
        if not products:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
        
        response = "–î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–≤–Ω–∏–º —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        headers = ["–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"]
        products_info = []
        
        for product in products:
            headers.append(product['name'])
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        comparisons = {
            "–ë—Ä–µ–Ω–¥": [p['brand_name'] for p in products],
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": [p['category_name'] for p in products],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å": [f"{p['cost_per_unit']:,.0f} VND" for p in products],
            "–û–ø–∏—Å–∞–Ω–∏–µ": [p['description'] for p in products]
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response += "üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:\n\n"
        for feature, values in comparisons.items():
            response += f"üìå {feature}:\n"
            for i, value in enumerate(values):
                response += f"   {headers[i+1]}: {value}\n"
            response += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        if len(products) > 1:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Ä–æ–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç
            prices = [(p['name'], p['cost_per_unit']) for p in products]
            cheapest = min(prices, key=lambda x: x[1])
            most_expensive = max(prices, key=lambda x: x[1])
            
            response += f"\nüè∑Ô∏è {cheapest[0]} - —Å–∞–º—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
            response += f"\nüíé {most_expensive[0]} - –ø—Ä–µ–º–∏—É–º –≤–∞—Ä–∏–∞–Ω—Ç"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É
            response += "\n\n–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞—Ç—å:\n"
            for product in products:
                response += f"\n‚ú® {product['name']} –ø–æ–¥–æ–π–¥–µ—Ç –µ—Å–ª–∏:\n"
                response += f"   - {generate_recommendation(product)}"
        
        return response
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}"

def format_recommendations(recommendations_data):
    """Helper function to format recommendations"""
    try:
        if isinstance(recommendations_data, str):
            products = json.loads(recommendations_data)
        else:
            products = recommendations_data
            
        if not products:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        
        response = "üìã –í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for product in products:
            category = product['category_name']
            if category not in categories:
                categories[category] = []
            categories[category].append(product)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, category_products in categories.items():
            response += f"üîπ {category}:\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ü–µ–Ω–µ
            category_products.sort(key=lambda x: x['cost_per_unit'])
            
            for product in category_products:
                response += f"üì¶ {product['name']} ({product['brand_name']})\n"
                response += f"   üí∞ –¶–µ–Ω–∞: {product['cost_per_unit']:,.0f} VND\n"
                response += f"   üìù {product['description']}\n"
                response += f"   ‚ú® {generate_recommendation(product)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response += "\nüí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        response += "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n"
        response += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–æ–∫\n"
        response += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∏–¥–æ–∫ –∏ –∫—É–ø–æ–Ω–æ–≤\n"
        
        return response
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"

def generate_recommendation(product):
    """Helper function to generate specific recommendations based on product attributes"""
    recommendation = ""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É
    if product['cost_per_unit'] < 100000:  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è "–±—é–¥–∂–µ—Ç–Ω–æ–≥–æ" –ø—Ä–æ–¥—É–∫—Ç–∞
        recommendation += "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π\n"
    elif product['cost_per_unit'] > 500000:  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è "–ø—Ä–µ–º–∏—É–º" –ø—Ä–æ–¥—É–∫—Ç–∞
        recommendation += "–ü—Ä–µ–º–∏—É–º –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n"
    else:
        recommendation += "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞\n"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = product['description'].lower()
    if "premium" in description or "pro" in description:
        recommendation += "   - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
    if "family" in description:
        recommendation += "   - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
    if "student" in description:
        recommendation += "   - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
    
    return recommendation

async def chat_layer_2_async_wrapper(question: str, chat_history: list) -> str:
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(None, chat_layer_2, question, chat_history)
    return response

async def chat_layer_1(question: str, chat_history: list) -> str:
    load_dotenv()
    os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")  

    chat_history_string = ""
    for chat_message in chat_history:
        chat_history_string += f"\n{chat_message['sender']}: {chat_message['message']}"

    llm = OpenAI(temperature=0)
    prompt = PromptTemplate(
        input_variables=["question", "chat_history"],
        template=TEMPLATE_LAYER_1
    )
    
    chain = LLMChain(llm=llm, prompt=prompt)
    
    try:
        response = await chain.ainvoke({"question": question, "chat_history": chat_history_string})
        if isinstance(response, dict) and "text" in response:
            response = response["text"]
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        response = ''.join(char for char in response if ord(char) >= 32 or char in '\n\r\t')
        response_json = json.loads(response)
        return response_json
    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {str(e)}")
        print(f"Raw response: {response}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "can_query": "False",
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        }
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return {
            "can_query": "False",
            "response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }